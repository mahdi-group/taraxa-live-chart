{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manager\\\\Documents\\\\GitHub\\\\taraxa-live-chart\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend);\nconst App = () => {\n  _s();\n  const [address, setAddress] = useState('');\n  const [events, setEvents] = useState([]);\n  const [error, setError] = useState('');\n  const [logs, setLogs] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [chartData, setChartData] = useState(null);\n  const pageSize = 10;\n  const knownPoolAddress = \"0xE9ba4dB22e58D5887fc67dbf8dB2b9516352315e\"; // Replace with the actual pool address\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (address) {\n        fetchTransferEvents();\n      }\n    }, 5000); // Poll every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [address]);\n  const fetchTransferEvents = async () => {\n    setError('');\n    setLogs([]);\n    if (!address) {\n      setError('Please enter a valid contract address.');\n      return;\n    }\n    try {\n      setLogs(prev => [...prev, 'Initializing Web3...']);\n      const web3 = new Web3('http://37.27.107.225:7777'); // Your node address\n\n      setLogs(prev => [...prev, `Querying Transfer events for address: ${address}`]);\n      const contract = new web3.eth.Contract([{\n        anonymous: false,\n        inputs: [{\n          indexed: true,\n          name: 'from',\n          type: 'address'\n        }, {\n          indexed: true,\n          name: 'to',\n          type: 'address'\n        }, {\n          indexed: false,\n          name: 'value',\n          type: 'uint256'\n        }],\n        name: 'Transfer',\n        type: 'event'\n      }], address);\n\n      // Fetch the latest block\n      const latestBlock = await web3.eth.getBlockNumber();\n\n      // Limit to the last 1000 transactions\n      const transactionsToShow = 100000; // Number of transactions to display\n      const blocksPerTransaction = 15; // Approximate block time (in seconds)\n      const blockRange = Math.ceil(transactionsToShow / blocksPerTransaction); // Approximate range of blocks\n      const fromBlock = Math.max(Number(latestBlock) - blockRange, 0);\n      setLogs(prev => [...prev, `Querying from block ${fromBlock} to ${latestBlock}`]);\n\n      // Fetch Transfer events\n      const pastEvents = await contract.getPastEvents('Transfer', {\n        fromBlock: '0',\n        toBlock: 'latest'\n      });\n      setLogs(prev => [...prev, `Fetched ${pastEvents.length} Transfer events.`]);\n\n      // Filter for \"buy\" and \"sell\" transactions\n      const buyAndSellEvents = pastEvents.filter(event => {\n        const {\n          from,\n          to\n        } = event.returnValues;\n        return from.toLowerCase() === knownPoolAddress.toLowerCase() || to.toLowerCase() === knownPoolAddress.toLowerCase();\n      });\n      setLogs(prev => [...prev, `Filtered ${buyAndSellEvents.length} Buy/Sell events.`]);\n      const formattedEvents = buyAndSellEvents.map(event => ({\n        from: event.returnValues.from,\n        to: event.returnValues.to,\n        value: BigInt(event.returnValues.value).toString(),\n        // Convert BigInt to string\n        transactionHash: event.transactionHash,\n        blockNumber: event.blockNumber,\n        timestamp: new Date().toISOString(),\n        // Placeholder timestamp\n        type: event.returnValues.to.toLowerCase() === knownPoolAddress.toLowerCase() ? 'Buy' : 'Sell'\n      }));\n\n      // Keep the latest 1000 transactions and remove duplicates\n      setEvents(prev => {\n        const allEvents = [...formattedEvents, ...prev];\n        const uniqueEvents = Array.from(new Set(allEvents.map(e => e.transactionHash))).map(hash => allEvents.find(e => e.transactionHash === hash));\n        return uniqueEvents.slice(0, transactionsToShow);\n      });\n\n      // Update chart data\n      const chartLabels = formattedEvents.map(e => e.timestamp);\n      const chartValues = formattedEvents.map(e => parseFloat(e.value));\n      setChartData({\n        labels: chartLabels,\n        datasets: [{\n          label: 'Transaction Values',\n          data: chartValues,\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 2,\n          fill: false\n        }]\n      });\n    } catch (err) {\n      setError(`Error occurred: ${err.message}`);\n      setLogs(prev => [...prev, `Error occurred: ${err.message}`]);\n    }\n  };\n  const paginatedEvents = events.slice((currentPage - 1) * pageSize, currentPage * pageSize);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Taraxa Live Chart Debugger\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: address,\n        onChange: e => setAddress(e.target.value),\n        placeholder: \"Enter Contract Address\",\n        style: {\n          width: '300px',\n          marginRight: '10px',\n          padding: '5px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchTransferEvents,\n        style: {\n          padding: '5px 10px'\n        },\n        children: \"Fetch Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Logs:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: log\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Transfer Events:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        style: {\n          width: '100%',\n          borderCollapse: 'collapse'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"From\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"To\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Timestamp\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Transaction Hash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: paginatedEvents.map((event, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            style: {\n              backgroundColor: event.type === 'Sell' ? 'red' : event.type === 'Buy' ? 'green' : 'white',\n              color: 'white'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: event.from\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: event.to\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: event.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: event.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: event.transactionHash\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: event.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setCurrentPage(prev => Math.max(prev - 1, 1)),\n          disabled: currentPage === 1,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            margin: '0 10px'\n          },\n          children: [\"Page \", currentPage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setCurrentPage(prev => prev * pageSize < events.length ? prev + 1 : prev),\n          disabled: currentPage * pageSize >= events.length,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Transaction Chart:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), chartData ? /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No chart data available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"4I8K0volpzVy5X2ZUurRQsa+DJc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Web3","Line","Chart","ChartJS","LineElement","CategoryScale","LinearScale","PointElement","Tooltip","Legend","jsxDEV","_jsxDEV","register","App","_s","address","setAddress","events","setEvents","error","setError","logs","setLogs","currentPage","setCurrentPage","chartData","setChartData","pageSize","knownPoolAddress","interval","setInterval","fetchTransferEvents","clearInterval","prev","web3","contract","eth","Contract","anonymous","inputs","indexed","name","type","latestBlock","getBlockNumber","transactionsToShow","blocksPerTransaction","blockRange","Math","ceil","fromBlock","max","Number","pastEvents","getPastEvents","toBlock","length","buyAndSellEvents","filter","event","from","to","returnValues","toLowerCase","formattedEvents","map","value","BigInt","toString","transactionHash","blockNumber","timestamp","Date","toISOString","allEvents","uniqueEvents","Array","Set","e","hash","find","slice","chartLabels","chartValues","parseFloat","labels","datasets","label","data","borderColor","borderWidth","fill","err","message","paginatedEvents","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","target","placeholder","width","marginRight","onClick","color","log","index","border","borderCollapse","backgroundColor","disabled","margin","_c","$RefreshReg$"],"sources":["C:/Users/manager/Documents/GitHub/taraxa-live-chart/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Web3 from 'web3';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  LineElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend);\r\n\r\nconst App = () => {\r\n  const [address, setAddress] = useState('');\r\n  const [events, setEvents] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [logs, setLogs] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [chartData, setChartData] = useState(null);\r\n  const pageSize = 10;\r\n\r\n  const knownPoolAddress = \"0xE9ba4dB22e58D5887fc67dbf8dB2b9516352315e\"; // Replace with the actual pool address\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (address) {\r\n        fetchTransferEvents();\r\n      }\r\n    }, 5000); // Poll every 5 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, [address]);\r\n\r\n  const fetchTransferEvents = async () => {\r\n    setError('');\r\n    setLogs([]);\r\n\r\n    if (!address) {\r\n      setError('Please enter a valid contract address.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLogs((prev) => [...prev, 'Initializing Web3...']);\r\n      const web3 = new Web3('http://37.27.107.225:7777'); // Your node address\r\n\r\n      setLogs((prev) => [...prev, `Querying Transfer events for address: ${address}`]);\r\n      const contract = new web3.eth.Contract(\r\n        [\r\n          {\r\n            anonymous: false,\r\n            inputs: [\r\n              { indexed: true, name: 'from', type: 'address' },\r\n              { indexed: true, name: 'to', type: 'address' },\r\n              { indexed: false, name: 'value', type: 'uint256' },\r\n            ],\r\n            name: 'Transfer',\r\n            type: 'event',\r\n          },\r\n        ],\r\n        address\r\n      );\r\n\r\n      // Fetch the latest block\r\n      const latestBlock = await web3.eth.getBlockNumber();\r\n\r\n      // Limit to the last 1000 transactions\r\n      const transactionsToShow = 100000; // Number of transactions to display\r\n      const blocksPerTransaction = 15; // Approximate block time (in seconds)\r\n      const blockRange = Math.ceil(transactionsToShow / blocksPerTransaction); // Approximate range of blocks\r\n      const fromBlock = Math.max(Number(latestBlock) - blockRange, 0);\r\n\r\n      setLogs((prev) => [...prev, `Querying from block ${fromBlock} to ${latestBlock}`]);\r\n\r\n      // Fetch Transfer events\r\n      const pastEvents = await contract.getPastEvents('Transfer', {\r\n        fromBlock: '0',\r\n        toBlock: 'latest',\r\n      });\r\n\r\n      setLogs((prev) => [...prev, `Fetched ${pastEvents.length} Transfer events.`]);\r\n\r\n      // Filter for \"buy\" and \"sell\" transactions\r\n      const buyAndSellEvents = pastEvents.filter((event) => {\r\n        const { from, to } = event.returnValues;\r\n        return (\r\n          from.toLowerCase() === knownPoolAddress.toLowerCase() ||\r\n          to.toLowerCase() === knownPoolAddress.toLowerCase()\r\n        );\r\n      });\r\n\r\n      setLogs((prev) => [...prev, `Filtered ${buyAndSellEvents.length} Buy/Sell events.`]);\r\n\r\n      const formattedEvents = buyAndSellEvents.map((event) => ({\r\n        from: event.returnValues.from,\r\n        to: event.returnValues.to,\r\n        value: BigInt(event.returnValues.value).toString(), // Convert BigInt to string\r\n        transactionHash: event.transactionHash,\r\n        blockNumber: event.blockNumber,\r\n        timestamp: new Date().toISOString(), // Placeholder timestamp\r\n        type: event.returnValues.to.toLowerCase() === knownPoolAddress.toLowerCase() ? 'Buy' : 'Sell',\r\n      }));\r\n\r\n      // Keep the latest 1000 transactions and remove duplicates\r\n      setEvents((prev) => {\r\n        const allEvents = [...formattedEvents, ...prev];\r\n        const uniqueEvents = Array.from(new Set(allEvents.map((e) => e.transactionHash)))\r\n          .map((hash) => allEvents.find((e) => e.transactionHash === hash));\r\n        return uniqueEvents.slice(0, transactionsToShow);\r\n      });\r\n\r\n      // Update chart data\r\n      const chartLabels = formattedEvents.map((e) => e.timestamp);\r\n      const chartValues = formattedEvents.map((e) => parseFloat(e.value));\r\n\r\n      setChartData({\r\n        labels: chartLabels,\r\n        datasets: [\r\n          {\r\n            label: 'Transaction Values',\r\n            data: chartValues,\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 2,\r\n            fill: false,\r\n          },\r\n        ],\r\n      });\r\n    } catch (err) {\r\n      setError(`Error occurred: ${err.message}`);\r\n      setLogs((prev) => [...prev, `Error occurred: ${err.message}`]);\r\n    }\r\n  };\r\n\r\n  const paginatedEvents = events.slice((currentPage - 1) * pageSize, currentPage * pageSize);\r\n\r\n  return (\r\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\r\n      <h1>Taraxa Live Chart Debugger</h1>\r\n\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={address}\r\n          onChange={(e) => setAddress(e.target.value)}\r\n          placeholder=\"Enter Contract Address\"\r\n          style={{ width: '300px', marginRight: '10px', padding: '5px' }}\r\n        />\r\n        <button onClick={fetchTransferEvents} style={{ padding: '5px 10px' }}>\r\n          Fetch Data\r\n        </button>\r\n      </div>\r\n\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n      <div>\r\n        <h3>Logs:</h3>\r\n        <ul>\r\n          {logs.map((log, index) => (\r\n            <li key={index}>{log}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      <div>\r\n        <h3>Transfer Events:</h3>\r\n        <table border=\"1\" style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n          <thead>\r\n            <tr>\r\n              <th>From</th>\r\n              <th>To</th>\r\n              <th>Value</th>\r\n              <th>Timestamp</th>\r\n              <th>Transaction Hash</th>\r\n              <th>Type</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {paginatedEvents.map((event, index) => (\r\n              <tr\r\n                key={index}\r\n                style={{\r\n                  backgroundColor: event.type === 'Sell' ? 'red' : event.type === 'Buy' ? 'green' : 'white',\r\n                  color: 'white',\r\n                }}\r\n              >\r\n                <td>{event.from}</td>\r\n                <td>{event.to}</td>\r\n                <td>{event.value}</td>\r\n                <td>{event.timestamp}</td>\r\n                <td>{event.transactionHash}</td>\r\n                <td>{event.type}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <div>\r\n          <button\r\n            onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}\r\n            disabled={currentPage === 1}\r\n          >\r\n            Previous\r\n          </button>\r\n          <span style={{ margin: '0 10px' }}>Page {currentPage}</span>\r\n          <button\r\n            onClick={() =>\r\n              setCurrentPage((prev) =>\r\n                prev * pageSize < events.length ? prev + 1 : prev\r\n              )\r\n            }\r\n            disabled={currentPage * pageSize >= events.length}\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <h3>Transaction Chart:</h3>\r\n        {chartData ? (\r\n          <Line data={chartData} />\r\n        ) : (\r\n          <p>No chart data available.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}