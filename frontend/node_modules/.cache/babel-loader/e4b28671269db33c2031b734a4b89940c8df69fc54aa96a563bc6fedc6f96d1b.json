{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manager\\\\Documents\\\\GitHub\\\\taraxa-live-chart\\\\frontend\\\\src\\\\components\\\\Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NODE_URL = 'http://37.27.107.225:7777'; // Replace with your node's RPC URL\nconst web3 = new Web3(new Web3.providers.HttpProvider(NODE_URL));\n\n// Replace with your contract ABI and address\nconst CONTRACT_ADDRESS = '0x063F255689b00A877F6be55109b3ECA24e266809';\nconst ABI = [{\n  constant: true,\n  inputs: [],\n  name: 'getHistoricalData',\n  outputs: [{\n    name: 'timestamps',\n    type: 'uint256[]'\n  }, {\n    name: 'prices',\n    type: 'uint256[]'\n  }],\n  type: 'function'\n}];\nfunction Chart() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [error, setError] = useState(null);\n  const fetchChartData = async () => {\n    try {\n      const contract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS);\n      const {\n        timestamps,\n        prices\n      } = await contract.methods.getHistoricalData().call();\n\n      // Format data for the chart\n      const formattedData = timestamps.map((timestamp, index) => ({\n        x: new Date(timestamp * 1000),\n        // Convert UNIX timestamp to JS Date\n        y: prices[index] / 1e18 // Adjust price format (if needed)\n      }));\n      setChartData(formattedData);\n    } catch (err) {\n      console.error('Error fetching chart data:', err);\n      setError('Failed to fetch chart data.');\n    }\n  };\n  useEffect(() => {\n    fetchChartData();\n  }, []);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  }\n  if (!chartData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading chart...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Price Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        datasets: [{\n          label: 'Price over Time',\n          data: chartData,\n          borderColor: 'rgba(75,192,192,1)',\n          backgroundColor: 'rgba(75,192,192,0.2)',\n          fill: true\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'day'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Price'\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(Chart, \"IFJj7nSJvcbvx2I/MLqJX73o+2w=\");\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Web3","jsxDEV","_jsxDEV","NODE_URL","web3","providers","HttpProvider","CONTRACT_ADDRESS","ABI","constant","inputs","name","outputs","type","Chart","_s","chartData","setChartData","error","setError","fetchChartData","contract","eth","Contract","timestamps","prices","methods","getHistoricalData","call","formattedData","map","timestamp","index","x","Date","y","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","data","datasets","label","borderColor","backgroundColor","fill","options","scales","time","unit","title","display","text","_c","$RefreshReg$"],"sources":["C:/Users/manager/Documents/GitHub/taraxa-live-chart/frontend/src/components/Chart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport Web3 from 'web3';\r\n\r\nconst NODE_URL = 'http://37.27.107.225:7777'; // Replace with your node's RPC URL\r\nconst web3 = new Web3(new Web3.providers.HttpProvider(NODE_URL));\r\n\r\n// Replace with your contract ABI and address\r\nconst CONTRACT_ADDRESS = '0x063F255689b00A877F6be55109b3ECA24e266809';\r\nconst ABI = [\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'getHistoricalData',\r\n    outputs: [\r\n      { name: 'timestamps', type: 'uint256[]' },\r\n      { name: 'prices', type: 'uint256[]' },\r\n    ],\r\n    type: 'function',\r\n  },\r\n];\r\n\r\nfunction Chart() {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchChartData = async () => {\r\n    try {\r\n      const contract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS);\r\n      const { timestamps, prices } = await contract.methods.getHistoricalData().call();\r\n\r\n      // Format data for the chart\r\n      const formattedData = timestamps.map((timestamp, index) => ({\r\n        x: new Date(timestamp * 1000), // Convert UNIX timestamp to JS Date\r\n        y: prices[index] / 1e18, // Adjust price format (if needed)\r\n      }));\r\n\r\n      setChartData(formattedData);\r\n    } catch (err) {\r\n      console.error('Error fetching chart data:', err);\r\n      setError('Failed to fetch chart data.');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchChartData();\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <p className=\"error\">{error}</p>;\r\n  }\r\n\r\n  if (!chartData) {\r\n    return <p>Loading chart...</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Price Chart</h2>\r\n      <Line\r\n        data={{\r\n          datasets: [\r\n            {\r\n              label: 'Price over Time',\r\n              data: chartData,\r\n              borderColor: 'rgba(75,192,192,1)',\r\n              backgroundColor: 'rgba(75,192,192,0.2)',\r\n              fill: true,\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          scales: {\r\n            x: {\r\n              type: 'time',\r\n              time: { unit: 'day' },\r\n            },\r\n            y: {\r\n              title: { display: true, text: 'Price' },\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}