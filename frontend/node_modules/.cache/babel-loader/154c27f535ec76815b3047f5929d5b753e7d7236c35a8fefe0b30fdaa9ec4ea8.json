{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manager\\\\Documents\\\\GitHub\\\\taraxa-live-chart\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport { Chart as ChartJS, CategoryScale, LinearScale, FinancialController } from 'chart.js';\nimport { CandlestickController, CandlestickElement } from 'chartjs-chart-financial';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, FinancialController, CandlestickController, CandlestickElement);\nconst App = () => {\n  _s();\n  const [address, setAddress] = useState('');\n  const [events, setEvents] = useState([]);\n  const [error, setError] = useState('');\n  const [logs, setLogs] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const knownPoolAddress = \"0xE9ba4dB22e58D5887fc67dbf8dB2b9516352315e\";\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (address) {\n        fetchTransferEvents();\n      }\n    }, 5000);\n    return () => clearInterval(interval);\n  }, [address]);\n  const fetchTransferEvents = async () => {\n    setError('');\n    setLogs([]);\n    if (!address) {\n      setError('Please enter a valid contract address.');\n      return;\n    }\n    try {\n      setLogs(prev => [...prev, 'Initializing Web3...']);\n      const web3 = new Web3('http://37.27.107.225:7777'); // Your node address\n\n      setLogs(prev => [...prev, `Querying Transfer events for address: ${address}`]);\n      const contract = new web3.eth.Contract([{\n        anonymous: false,\n        inputs: [{\n          indexed: true,\n          name: 'from',\n          type: 'address'\n        }, {\n          indexed: true,\n          name: 'to',\n          type: 'address'\n        }, {\n          indexed: false,\n          name: 'value',\n          type: 'uint256'\n        }],\n        name: 'Transfer',\n        type: 'event'\n      }], address);\n      const latestBlock = await web3.eth.getBlockNumber();\n      const fromBlock = Math.max(Number(latestBlock) - 1000, 0);\n      const pastEvents = await contract.getPastEvents('Transfer', {\n        fromBlock: fromBlock.toString(),\n        toBlock: 'latest'\n      });\n      const filteredEvents = pastEvents.map(event => ({\n        from: event.returnValues.from,\n        to: event.returnValues.to,\n        value: BigInt(event.returnValues.value).toString(),\n        transactionHash: event.transactionHash,\n        timestamp: new Date().toISOString(),\n        type: event.returnValues.to.toLowerCase() === knownPoolAddress.toLowerCase() ? 'Sell' : event.returnValues.from.toLowerCase() === knownPoolAddress.toLowerCase() ? 'Buy' : 'Other'\n      })).filter(event => event.type === 'Buy' || event.type === 'Sell');\n      setLogs(prev => [...prev, `Found ${filteredEvents.length} Buy/Sell events.`]);\n      setEvents(prev => [...filteredEvents, ...prev].slice(0, 1000)); // Limit to last 1000 transactions\n\n      // Create candlestick data\n      const groupedData = groupByTime(filteredEvents, 60); // Group by 1-minute intervals\n      const candlestickData = groupedData.map(group => ({\n        x: group.timestamp,\n        o: group.open,\n        h: group.high,\n        l: group.low,\n        c: group.close\n      }));\n      setChartData({\n        datasets: [{\n          label: 'Buy/Sell Orders',\n          data: candlestickData,\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      });\n    } catch (err) {\n      setError(`Error occurred: ${err.message}`);\n      setLogs(prev => [...prev, `Error occurred: ${err.message}`]);\n    }\n  };\n  const groupByTime = (data, interval) => {\n    // Group transactions into intervals and calculate o, h, l, c\n    const grouped = [];\n    let currentGroup = null;\n    data.forEach(event => {\n      const timestamp = Math.floor(new Date(event.timestamp).getTime() / 1000);\n      const intervalStart = Math.floor(timestamp / interval) * interval;\n      if (!currentGroup || currentGroup.intervalStart !== intervalStart) {\n        if (currentGroup) grouped.push(currentGroup);\n        currentGroup = {\n          intervalStart,\n          open: parseFloat(event.value),\n          high: parseFloat(event.value),\n          low: parseFloat(event.value),\n          close: parseFloat(event.value),\n          timestamp: new Date(intervalStart * 1000).toISOString()\n        };\n      } else {\n        currentGroup.high = Math.max(currentGroup.high, parseFloat(event.value));\n        currentGroup.low = Math.min(currentGroup.low, parseFloat(event.value));\n        currentGroup.close = parseFloat(event.value);\n      }\n    });\n    if (currentGroup) grouped.push(currentGroup);\n    return grouped;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Taraxa Candlestick Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: address,\n        onChange: e => setAddress(e.target.value),\n        placeholder: \"Enter Contract Address\",\n        style: {\n          width: '300px',\n          marginRight: '10px',\n          padding: '5px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchTransferEvents,\n        style: {\n          padding: '5px 10px'\n        },\n        children: \"Fetch Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Logs:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: log\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Candlestick Chart:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), chartData ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"chart\",\n        width: \"800\",\n        height: \"400\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No chart data available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"HW8Al+QW9QCFC5cZetB+LgHZJE8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Web3","Chart","ChartJS","CategoryScale","LinearScale","FinancialController","CandlestickController","CandlestickElement","jsxDEV","_jsxDEV","register","App","_s","address","setAddress","events","setEvents","error","setError","logs","setLogs","chartData","setChartData","knownPoolAddress","interval","setInterval","fetchTransferEvents","clearInterval","prev","web3","contract","eth","Contract","anonymous","inputs","indexed","name","type","latestBlock","getBlockNumber","fromBlock","Math","max","Number","pastEvents","getPastEvents","toString","toBlock","filteredEvents","map","event","from","returnValues","to","value","BigInt","transactionHash","timestamp","Date","toISOString","toLowerCase","filter","length","slice","groupedData","groupByTime","candlestickData","group","x","o","open","h","high","l","low","c","close","datasets","label","data","borderColor","borderWidth","err","message","grouped","currentGroup","forEach","floor","getTime","intervalStart","push","parseFloat","min","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","placeholder","width","marginRight","onClick","color","log","index","id","height","_c","$RefreshReg$"],"sources":["C:/Users/manager/Documents/GitHub/taraxa-live-chart/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Web3 from 'web3';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, FinancialController } from 'chart.js';\r\nimport { CandlestickController, CandlestickElement } from 'chartjs-chart-financial';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  FinancialController,\r\n  CandlestickController,\r\n  CandlestickElement\r\n);\r\n\r\nconst App = () => {\r\n  const [address, setAddress] = useState('');\r\n  const [events, setEvents] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [logs, setLogs] = useState([]);\r\n  const [chartData, setChartData] = useState(null);\r\n  const knownPoolAddress = \"0xE9ba4dB22e58D5887fc67dbf8dB2b9516352315e\";\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (address) {\r\n        fetchTransferEvents();\r\n      }\r\n    }, 5000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [address]);\r\n\r\n  const fetchTransferEvents = async () => {\r\n    setError('');\r\n    setLogs([]);\r\n\r\n    if (!address) {\r\n      setError('Please enter a valid contract address.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLogs((prev) => [...prev, 'Initializing Web3...']);\r\n      const web3 = new Web3('http://37.27.107.225:7777'); // Your node address\r\n\r\n      setLogs((prev) => [...prev, `Querying Transfer events for address: ${address}`]);\r\n      const contract = new web3.eth.Contract(\r\n        [\r\n          {\r\n            anonymous: false,\r\n            inputs: [\r\n              { indexed: true, name: 'from', type: 'address' },\r\n              { indexed: true, name: 'to', type: 'address' },\r\n              { indexed: false, name: 'value', type: 'uint256' },\r\n            ],\r\n            name: 'Transfer',\r\n            type: 'event',\r\n          },\r\n        ],\r\n        address\r\n      );\r\n\r\n      const latestBlock = await web3.eth.getBlockNumber();\r\n      const fromBlock = Math.max(Number(latestBlock) - 1000, 0);\r\n\r\n      const pastEvents = await contract.getPastEvents('Transfer', {\r\n        fromBlock: fromBlock.toString(),\r\n        toBlock: 'latest',\r\n      });\r\n\r\n      const filteredEvents = pastEvents\r\n        .map((event) => ({\r\n          from: event.returnValues.from,\r\n          to: event.returnValues.to,\r\n          value: BigInt(event.returnValues.value).toString(),\r\n          transactionHash: event.transactionHash,\r\n          timestamp: new Date().toISOString(),\r\n          type: event.returnValues.to.toLowerCase() === knownPoolAddress.toLowerCase()\r\n            ? 'Sell'\r\n            : event.returnValues.from.toLowerCase() === knownPoolAddress.toLowerCase()\r\n            ? 'Buy'\r\n            : 'Other',\r\n        }))\r\n        .filter((event) => event.type === 'Buy' || event.type === 'Sell');\r\n\r\n      setLogs((prev) => [...prev, `Found ${filteredEvents.length} Buy/Sell events.`]);\r\n\r\n      setEvents((prev) => [...filteredEvents, ...prev].slice(0, 1000)); // Limit to last 1000 transactions\r\n\r\n      // Create candlestick data\r\n      const groupedData = groupByTime(filteredEvents, 60); // Group by 1-minute intervals\r\n      const candlestickData = groupedData.map((group) => ({\r\n        x: group.timestamp,\r\n        o: group.open,\r\n        h: group.high,\r\n        l: group.low,\r\n        c: group.close,\r\n      }));\r\n\r\n      setChartData({\r\n        datasets: [\r\n          {\r\n            label: 'Buy/Sell Orders',\r\n            data: candlestickData,\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      });\r\n    } catch (err) {\r\n      setError(`Error occurred: ${err.message}`);\r\n      setLogs((prev) => [...prev, `Error occurred: ${err.message}`]);\r\n    }\r\n  };\r\n\r\n  const groupByTime = (data, interval) => {\r\n    // Group transactions into intervals and calculate o, h, l, c\r\n    const grouped = [];\r\n    let currentGroup = null;\r\n\r\n    data.forEach((event) => {\r\n      const timestamp = Math.floor(new Date(event.timestamp).getTime() / 1000);\r\n      const intervalStart = Math.floor(timestamp / interval) * interval;\r\n\r\n      if (!currentGroup || currentGroup.intervalStart !== intervalStart) {\r\n        if (currentGroup) grouped.push(currentGroup);\r\n        currentGroup = {\r\n          intervalStart,\r\n          open: parseFloat(event.value),\r\n          high: parseFloat(event.value),\r\n          low: parseFloat(event.value),\r\n          close: parseFloat(event.value),\r\n          timestamp: new Date(intervalStart * 1000).toISOString(),\r\n        };\r\n      } else {\r\n        currentGroup.high = Math.max(currentGroup.high, parseFloat(event.value));\r\n        currentGroup.low = Math.min(currentGroup.low, parseFloat(event.value));\r\n        currentGroup.close = parseFloat(event.value);\r\n      }\r\n    });\r\n\r\n    if (currentGroup) grouped.push(currentGroup);\r\n    return grouped;\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\r\n      <h1>Taraxa Candlestick Chart</h1>\r\n\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={address}\r\n          onChange={(e) => setAddress(e.target.value)}\r\n          placeholder=\"Enter Contract Address\"\r\n          style={{ width: '300px', marginRight: '10px', padding: '5px' }}\r\n        />\r\n        <button onClick={fetchTransferEvents} style={{ padding: '5px 10px' }}>\r\n          Fetch Data\r\n        </button>\r\n      </div>\r\n\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n      <div>\r\n        <h3>Logs:</h3>\r\n        <ul>\r\n          {logs.map((log, index) => (\r\n            <li key={index}>{log}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      <div>\r\n        <h3>Candlestick Chart:</h3>\r\n        {chartData ? (\r\n          <canvas id=\"chart\" width=\"800\" height=\"400\"></canvas>\r\n        ) : (\r\n          <p>No chart data available.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}